#!/bin/bash -x

. ./hooks/env

if [ "${DOCKER_CLI_EXPERIMENTAL}" = "enabled" ]; then
  ${DOCKER_CLI} run --rm --privileged multiarch/qemu-user-static --reset -p yes
  BUILDX_VER=$(curl --silent "https://api.github.com/repos/docker/buildx/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
  curl -o docker-buildx -L https://github.com/docker/buildx/releases/latest/download/buildx-${BUILDX_VER}.linux-amd64
  chmod +x docker-buildx
  mkdir -p ~/.docker/cli-plugins
  mv docker-buildx ~/.docker/cli-plugins/
  ${DOCKER_CLI} buildx --help
  ${DOCKER_CLI} buildx install
  ${DOCKER_CLI} buildx create --name mybuilder
  ${DOCKER_CLI} buildx use mybuilder
  ${DOCKER_CLI} buildx inspect --boostrap
  for i in ${ARCH_LIST}; do
    PLATFORMS="${PLATFORMS}linux/${i},"
  done
  PLATFORMS="--platform ${PLATFORMS%%,} "
  BUILDER="${DOCKER_CLI}"
else
  BUILDER="docker"
fi

${BUILDER} build \
  --build-arg VERSION="${PKG_VER}"  \
  --build-arg COMMIT="${SOURCE_COMMIT}" \
  --build-arg BRANCH="${SOURCE_BRANCH}" \
  --build-arg VCS_URL="${VCS_URL}" \
  --build-arg BUILD_DATE="${BUILD_DATE}" \
  --build-arg ALPINE_VER="${ALPINE_VER}" \
  --build-arg PYTHON_VER="${PYTHON_VER}" \
  --build-arg DOCKER_ARCH="${DOCKER_ARCH}" \
  --build-arg BASEIMAGE_ARCH="${BASEIMAGE_ARCH}" \
  --build-arg PKG_ARCH="${PKG_ARCH}" \
  --build-arg QEMU_ARCH="${QEMU_ARCH}" \
-f "${DOCKERFILE_PATH}" \
-t "${DOCKER_REPO}:latest" \
-t "${IMAGE_NAME}" \
${PLATFORMS} \
--push . \
| while read line ; do echo "$(date)| $line"; done;
${BUILDER} manifest --help
